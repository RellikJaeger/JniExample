apply plugin: 'com.android.application'

project.ext {
    mylibs = fileTree(dir: 'libs', include: ['*.jar'])
}

def getFileSizeFromObb() {
    // Method body here
    File mainObb = new File("/Users/shizzhan/JniExample/app/CMakeLists.txt")
    return mainObb.length()
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.arophix.jniexample"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }

        println "===++++ >>>>> size = " + getFileSizeFromObb()
//        manifestPlaceholders = [main_obb_size: getFileSizeFromObb]
    }

    sourceSets {
        main {
            jniLibs.srcDirs += ['/storage/emulated/0/Download/']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "api"

    productFlavors {

        minApi16 {
            dimension "api"
            minSdkVersion 16
            versionCode android.defaultConfig.versionCode
            versionNameSuffix "-minApi16"

//            ndk {
//                abiFilters 'armeabi-v7a'
//            }
        }

        minApi21 {
            dimension "api"
            minSdkVersion 21
            versionCode android.defaultConfig.versionCode
            versionNameSuffix "-minApi21"

//            ndk {
//                abiFilters 'arm64-v8a'
//            }
        }

    }

    if (project.hasProperty("doNotStrip")) {
        packagingOptions {
            doNotStrip '**/.*so'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

//    api fileTree(dir: 'libs', include: ['*.jar'])
    api mylibs
}

// Write apk to private archive
def capitalizeFirstLetter(s) { s[0].toUpperCase() + s[1..-1] }

def publish = project.tasks.create("copyApks")
publish.description "Copies apks to custom directory"
android.applicationVariants.all { variant ->

    def customPath

    variant.outputs.all {

        customPath = "$projectDir"

        println "===>>>>> size = " + getFileSizeFromObb()

        def capitalizedVariantName = capitalizeFirstLetter(variant.name)
        def task = project.tasks.create("copy${capitalizedVariantName}Apk", Copy)

        def outputDirPath = new File("${project.buildDir.absolutePath}/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
//        task.from(outputFile) // this will cause WARNING: API 'variantOutput.getPackageApplication()' is obsolete and has been replaced with 'variant.getPackageApplicationProvider()'.
        task.from(outputDirPath)
        task.into(customPath)

        task.dependsOn variant.assembleProvider
        publish.dependsOn task
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
//        println "===>>>>> variant.packageApplicationProvider.get().outputDirectory = " + variant.outputs.get
//        variant.packageApplicationProvider.get().outputDirectory = new File(
//                project.rootDir.absolutePath + "/" + variant.buildType.name)

//        def outputDirPath = new File("${project.buildDir.absolutePath}/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
//        variant.packageApplicationProvider.get().outputDirectory = outputDirPath

        def outputDirPath2 = new File("${project.rootDir.absolutePath}/apks/${variant.flavorName}/${variant.buildType.name}")
        variant.packageApplicationProvider.get().outputDirectory = outputDirPath2

        def apkFileName = "${rootProject.name}_${android.defaultConfig.versionName}.apk"
        output.outputFileName = apkFileName // directly assign the new name back to outputFileName
    }
}


project.afterEvaluate {
    tasks.create("depsize") {
        listConfigurationDependencies(configurations.default)
    }

    tasks.create("depsize-all-configurations") {
        configurations.each {
            if (it.isCanBeResolved()) {
                listConfigurationDependencies(it)
            }
        }
    }

}

def listConfigurationDependencies(Configuration configuration) {
    def formatStr = "%,10.2f"

    def size = configuration.collect { it.length() / (1024 * 1024) }.sum()

    def out = new StringBuffer()
    out << "\nConfiguration name: \"${configuration.name}\"\n"
    if (size) {
        out << 'Total dependencies size:'.padRight(65)
        out << "${String.format(formatStr, size)} MB\n\n"

        configuration.sort { -it.length() }
                .each {
            out << "${it.name}".padRight(65)
            out << "${String.format(formatStr, (it.length() / 1024))} KB\n"
        }
    } else {
        out << 'No dependencies found';
    }
    println(out)
}