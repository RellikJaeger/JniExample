apply plugin: 'com.android.application'

project.ext {
    mylibs = fileTree(dir: 'libs', include: ['*.jar'])
}

def getFileSizeFromObb() {
    // Method body here
    File mainObb = new File("/Users/shizzhan/JniExample/app/CMakeLists.txt")
    return mainObb.length()
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.arophix.jniexample"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }

        println "===++++ >>>>> size = " + getFileSizeFromObb()
//        manifestPlaceholders = [main_obb_size: getFileSizeFromObb]
    }

    sourceSets {
        main {
            jniLibs.srcDirs += ['/storage/emulated/0/Download/']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (project.hasProperty("doNotStrip")) {
        packagingOptions {
            doNotStrip '**/.*so'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

//    api fileTree(dir: 'libs', include: ['*.jar'])
    api mylibs
}

// Write apk to private archive
def capitalizeFirstLetter(s) { s[0].toUpperCase() + s[1..-1] }
def publish = project.tasks.create("copyApks")
publish.description "Copies apks to custom directory"
android.applicationVariants.all { variant ->

    def customPath

    variant.outputs.all {

        customPath = "$projectDir"

        println "===>>>>> size = " + getFileSizeFromObb()

        def capitalizedVariantName = capitalizeFirstLetter(variant.name)
        def task = project.tasks.create("copy${capitalizedVariantName}Apk", Copy)

        task.from(outputFile)
        task.into(customPath)

        task.dependsOn variant.assemble
        publish.dependsOn task
    }
}